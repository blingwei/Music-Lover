<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blingwei.musicService.dao.EssayWithSongMapper">
    <resultMap id="baseResultMap" type="com.blingwei.musicService.pojo.EssayWithSong">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="song_id" property="songId" jdbcType="INTEGER"/>
        <result column="essay_id" property="essayId" jdbcType="INTEGER"/>
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="heat" property="heat" jdbcType="INTEGER"/>
        <result column="pick_num" property="pickNum" jdbcType="INTEGER"/>
        <result column="reward" property="reward" jdbcType="INTEGER"/>
        <result column="commit_num" property="commitNum" jdbcType="INTEGER"/>
        <result column="collect_num" property="collectNum" jdbcType="INTEGER"/>
        <result column="views" property="views" jdbcType="INTEGER"/>
    </resultMap>

    <sql id="baseColumn">

    </sql>

    <insert id="addEssayWithSong" parameterType="EssayWithSong" useGeneratedKeys="true" keyProperty="id">
        insert into essay_song (song_id, essay_id, user_id, create_time) values (#{songId}, #{essayId}, #{userId},
        now())
    </insert>

    <select id="findEssayWithSongById" parameterType="java.lang.Integer" resultMap="baseResultMap">
        select * from essay_song where id = #{id}
    </select>

    <select id="findEssayWithSongByEssayId" parameterType="java.lang.Integer" resultMap="baseResultMap">
        select * from essay_song where essay_id = #{id};
    </select>

    <select id="getEssayWithSongNumByUserId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        select count(*) from essay_song where user_id = #{userId}
    </select>

    <select id="getPublicInfosByUserName" parameterType="java.lang.String"
            resultType="com.blingwei.musicService.bean.responseBean.PublishInfoResponse">
        SELECT e.title as title, e.content as content, e.id as essayId, es.id as id
        from essay_song es
        LEFT JOIN essay e on es.essay_id = e.id
        LEFT JOIN user u on es.user_id = u.id
        where u.userName = #{userName}
    </select>

    <select id="findEssayNameById" resultType="java.lang.String" parameterType="java.lang.Integer">
        SELECT essay.title
        from essay, essay_song
        where essay.id = essay_song.essay_id
        and essay_song.id = #{id}
    </select>


    <select id="getPublishesWithoutVerify" resultType="com.blingwei.musicService.bean.commanBean.PublishVerifyBean">
        SELECT es.id as publishId, e.title as publishName, u.username as authorName
        from essay_song es, essay e, `user` u
        where es.essay_id = e.id
        and es.user_id = u.id
        and es.`status` = 0
        ORDER BY create_time desc
        limit #{start}, #{size}
    </select>

    <select id="getPublishView" parameterType="java.lang.Integer"
            resultType="com.blingwei.musicService.bean.responseBean.AdminViewPublishResponse">
        select essay.content as content, essay_song.song_id as songId
        from essay, essay_song
        where essay.id = essay_song.essay_id
        and essay_song.id = #{id}
    </select>
    <update id="AdminVerifyPublish">
        update essay_song
        set status = #{status}
        where id = #{id}
    </update>
    <select id="getAllPublishNums" resultType="java.lang.Integer">
        select count(*)
        from essay_song
        where essay_song.`status` = 0
    </select>
    <select id="getPublishesWithRestrict" resultType="com.blingwei.musicService.bean.commanBean.PublishManageBean">
        SELECT es.id as publishId, e.title as publishName, u.username as authorName, es.`status` as status
        from essay_song es, essay e, `user` u
        where es.essay_id = e.id
        and es.user_id = u.id
        <if test="input != ''">
            and e.title rlike #{input}
        </if>
        <if test="status != -1 ">
            and es.`status` = #{status}
        </if>
        ORDER BY create_time desc
        limit #{start}, #{size}

    </select>

    <select id="getPublishesWithRestrictNums" resultType="java.lang.Integer">
        SELECT count(*)
        from essay_song es, essay e, `user` u
        where es.essay_id = e.id
        and es.user_id = u.id
        <if test="input != ''">
            and e.title rlike #{input}
        </if>
        <if test="status != -1 ">
            and es.`status` = #{status}
        </if>

    </select>
    <delete id="deltePublish">
        delete from essay_song where id = #{id}
    </delete>
    <select id="findEssayForElasticById" resultType="com.blingwei.musicService.pojo.EssayForElastic"
            parameterType="java.lang.Integer">
        select es.id as id, e.title as title, e.intor as intor ,e.content as content, s.`name` as songName, u.username
        as userName
        from essay_song es, essay e, song s, `user` u
        where es.essay_id = e.id
        and es.song_id = s.id
        and es.user_id = u.id
        and es.id = #{id}
    </select>

</mapper>
